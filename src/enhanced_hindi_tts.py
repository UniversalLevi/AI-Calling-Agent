"""
Enhanced Hindi TTS - Better Quality Hindi Speech
===============================================

This module provides high-quality Hindi text-to-speech using multiple providers.
"""

import os
import tempfile
import time
import glob
from pathlib import Path
from typing import Optional

try:
    from .language_detector import detect_language
except ImportError:
    from language_detector import detect_language


class EnhancedHindiTTS:
    """Enhanced Hindi TTS with multiple provider support"""
    
    def __init__(self):
        self.providers = []
        self._initialize_providers()
        self._cleanup_old_audio_files()
    
    def _initialize_providers(self):
        """Initialize available TTS providers based on .env configuration"""
        
        # Get preferred TTS provider from .env
        preferred_provider = os.getenv('TTS_PROVIDER', 'twilio').lower()
        print(f"üéØ Preferred TTS provider from .env: {preferred_provider}")
        
        # Add preferred provider first if available
        if preferred_provider == 'azure' and self._check_azure_credentials():
            self.providers.append('azure')
            print("üîä Azure TTS available (Preferred)")
        elif preferred_provider == 'google' and self._check_google_credentials():
            self.providers.append('google')
            print("üîä Google Cloud TTS available (Preferred)")
        elif preferred_provider == 'openai' and self._check_openai_credentials():
            self.providers.append('openai')
            print("üîä OpenAI TTS available (Preferred)")
        
        # Add other available providers as fallbacks
        if 'azure' not in self.providers and self._check_azure_credentials():
            self.providers.append('azure')
            print("üîä Azure TTS available (Fallback)")
        
        if 'google' not in self.providers and self._check_google_credentials():
            self.providers.append('google')
            print("üîä Google Cloud TTS available (Fallback)")
        
        if 'openai' not in self.providers and self._check_openai_credentials():
            self.providers.append('openai')
            print("üîä OpenAI TTS available (Fallback)")
        
        # Always have gTTS as final fallback
        self.providers.append('gtts')
        print("üîä gTTS available (Final Fallback)")
        
        print(f"üé§ Hindi TTS providers available: {len(self.providers)}")
    
    def _cleanup_old_audio_files(self):
        """Clean up old audio files to save space"""
        try:
            audio_dir = Path("audio_files")
            if not audio_dir.exists():
                return
            
            # Delete files older than 5 minutes (300 seconds)
            current_time = time.time()
            max_age = 300  # 5 minutes
            
            deleted_count = 0
            for file_path in audio_dir.glob("*.mp3"):
                if current_time - file_path.stat().st_mtime > max_age:
                    file_path.unlink()
                    deleted_count += 1
            
            if deleted_count > 0:
                print(f"üßπ Cleaned up {deleted_count} old audio files (older than 5 minutes)")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Audio cleanup error: {e}")
    
    def _check_azure_credentials(self) -> bool:
        """Check if Azure credentials are available"""
        return bool(os.getenv('AZURE_SPEECH_KEY') and os.getenv('AZURE_SPEECH_REGION'))
    
    def _check_google_credentials(self) -> bool:
        """Check if Google Cloud credentials are available"""
        return bool(os.getenv('GOOGLE_APPLICATION_CREDENTIALS') or os.getenv('GOOGLE_CLOUD_TTS_KEY'))
    
    def _check_openai_credentials(self) -> bool:
        """Check if OpenAI credentials are available"""
        return bool(os.getenv('OPENAI_API_KEY'))
    
    def speak_hindi_azure(self, text: str) -> Optional[str]:
        """Generate Hindi speech using Azure Cognitive Services"""
        try:
            import azure.cognitiveservices.speech as speechsdk
            
            speech_key = os.getenv('AZURE_SPEECH_KEY')
            service_region = os.getenv('AZURE_SPEECH_REGION')
            
            speech_config = speechsdk.SpeechConfig(subscription=speech_key, region=service_region)
            
            # Use high-quality Hindi voice
            speech_config.speech_synthesis_voice_name = "hi-IN-SwaraNeural"  # Female voice
            # Alternative: "hi-IN-MadhurNeural" (Male voice)
            
            # Create audio file
            audio_dir = Path("audio_files")
            audio_dir.mkdir(exist_ok=True)
            timestamp = int(time.time() * 1000)
            audio_file = audio_dir / f"azure_hindi_{timestamp}.wav"
            
            audio_config = speechsdk.audio.AudioOutputConfig(filename=str(audio_file))
            synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config, audio_config=audio_config)
            
            result = synthesizer.speak_text_async(text).get()
            
            if result.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
                print(f"üéµ Azure Hindi TTS: {audio_file.name}")
                # Return just the filename; the controller will build a public URL
                return audio_file.name
            else:
                print(f"‚ùå Azure TTS failed: {result.reason}")
                return None
                
        except Exception as e:
            print(f"‚ùå Azure TTS error: {e}")
            return None
    
    def speak_hindi_google(self, text: str) -> Optional[str]:
        """Generate Hindi speech using Google Cloud TTS"""
        try:
            from google.cloud import texttospeech
            
            client = texttospeech.TextToSpeechClient()
            
            synthesis_input = texttospeech.SynthesisInput(text=text)
            
            # High-quality Hindi voice
            voice = texttospeech.VoiceSelectionParams(
                language_code="hi-IN",
                name="hi-IN-Wavenet-A",  # High-quality WaveNet voice
                ssml_gender=texttospeech.SsmlVoiceGender.FEMALE
            )
            
            audio_config = texttospeech.AudioConfig(
                audio_encoding=texttospeech.AudioEncoding.MP3
            )
            
            response = client.synthesize_speech(
                input=synthesis_input, voice=voice, audio_config=audio_config
            )
            
            # Save audio file
            audio_dir = Path("audio_files")
            audio_dir.mkdir(exist_ok=True)
            timestamp = int(time.time() * 1000)
            audio_file = audio_dir / f"google_hindi_{timestamp}.mp3"
            
            with open(audio_file, "wb") as out:
                out.write(response.audio_content)
            
            print(f"üéµ Google Hindi TTS: {audio_file.name}")
            # Return just the filename; the controller will build a public URL
            return audio_file.name
            
        except Exception as e:
            print(f"‚ùå Google TTS error: {e}")
            return None
    
    def speak_hindi_openai(self, text: str) -> Optional[str]:
        """Generate speech using OpenAI TTS with Sara's female voice"""
        try:
            import openai
            
            api_key = os.getenv('OPENAI_API_KEY')
            model = os.getenv('OPENAI_TTS_MODEL', 'tts-1')  # Use standard model for natural speech
            
            # Use female voice for Sara with master branch settings
            voice = os.getenv('OPENAI_TTS_VOICE', 'nova')  # Nova is a female voice
            
            client = openai.OpenAI(api_key=api_key)
            
            # Create audio file
            audio_dir = Path("audio_files")
            audio_dir.mkdir(exist_ok=True)
            timestamp = int(time.time() * 1000)
            audio_file = audio_dir / f"sara_voice_{timestamp}.mp3"
            
            # Optimize text for better Hinglish pronunciation
            optimized_text = self._optimize_text_for_tts(text)
            
            # Generate speech with master branch settings for natural speech
            response = client.audio.speech.create(
                model=model,
                voice=voice,
                input=optimized_text,
                speed=1.0,  # Normal speed for natural speech (master branch setting)
                response_format="mp3"
            )
            
            # Save audio file
            with open(audio_file, 'wb') as f:
                f.write(response.content)
            
            print(f"üéµ Sara's Voice (OpenAI): {audio_file.name}")
            return audio_file.name
            
        except Exception as e:
            print(f"‚ùå OpenAI TTS error: {e}")
            return None
    
    def _optimize_text_for_tts(self, text: str) -> str:
        """Optimize text for better TTS pronunciation - Use simpler approach for clearer audio"""
        # Use the simpler fallback approach for better pronunciation clarity
        # The advanced transliterator was over-processing and making audio unclear
        return self._fallback_text_optimization(text)
    
    def _fallback_text_optimization(self, text: str) -> str:
        """Fallback text optimization when advanced transliterator is not available"""
        # Add natural pauses and speech patterns for more human-like delivery
        text = self._add_natural_pauses(text)
        
        # Comprehensive Hindi to Romanized transliteration for better TTS
        replacements = {
            # Basic pronouns and common words
            '‡§®‡§Æ‡§∏‡•ç‡§§‡•á': 'Namaste',
            '‡§π‡•à‡§Ç': 'hain',
            '‡§π‡•à': 'hai',
            '‡§Æ‡•à‡§Ç': 'main',
            '‡§Ü‡§™': 'aap',
            '‡§ï‡•à‡§∏‡•á': 'kaise',
            '‡§ï‡•ç‡§Ø‡§æ': 'kya',
            '‡§ï‡§π‡§æ‡§Å': 'kahan',
            '‡§ï‡§¨': 'kab',
            '‡§ï‡•ç‡§Ø‡•ã‡§Ç': 'kyun',
            '‡§ï‡§ø‡§§‡§®‡§æ': 'kitna',
            '‡§ï‡•å‡§®': 'kaun',
            '‡§ï‡•å‡§® ‡§∏‡§æ': 'kaun sa',
            '‡§ï‡•å‡§® ‡§∏‡•Ä': 'kaun si',
            '‡§ï‡•å‡§® ‡§∏‡•á': 'kaun se',
            '‡§Æ‡•Å‡§ù‡•á': 'mujhe',
            '‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç': 'tumhe',
            '‡§Ü‡§™‡§ï‡•ã': 'aapko',
            '‡§π‡§Æ‡•á‡§Ç': 'hamein',
            '‡§â‡§®‡•ç‡§π‡•á‡§Ç': 'unhein',
            '‡§á‡§∏': 'is',
            '‡§â‡§∏': 'us',
            '‡§Ø‡§π': 'yah',
            '‡§µ‡§π': 'vah',
            '‡§Ø‡•á': 'ye',
            '‡§µ‡•á': 've',
            '‡§Æ‡•á‡§∞‡§æ': 'mera',
            '‡§Æ‡•á‡§∞‡•Ä': 'meri',
            '‡§Æ‡•á‡§∞‡•á': 'mere',
            '‡§Ü‡§™‡§ï‡§æ': 'aapka',
            '‡§Ü‡§™‡§ï‡•Ä': 'aapki',
            '‡§Ü‡§™‡§ï‡•á': 'aapke',
            '‡§π‡§Æ‡§æ‡§∞‡§æ': 'hamara',
            '‡§π‡§Æ‡§æ‡§∞‡•Ä': 'hamari',
            '‡§π‡§Æ‡§æ‡§∞‡•á': 'hamare',
            '‡§â‡§®‡§ï‡§æ': 'unka',
            '‡§â‡§®‡§ï‡•Ä': 'unki',
            '‡§â‡§®‡§ï‡•á': 'unke',
            
            # Common verbs and actions - more natural pronunciation
            '‡§ú‡§æ‡§®‡§æ': 'jana',
            '‡§Ü‡§®‡§æ': 'aana',
            '‡§ï‡§∞‡§®‡§æ': 'karna',
            '‡§ï‡§∞‡•ã': 'karo',
            '‡§ï‡§∞‡•á‡§Ç': 'karen',
            '‡§ï‡§∞‡§§‡•á': 'karte',
            '‡§ï‡§∞‡§§‡§æ': 'karta',
            '‡§ï‡§∞‡§§‡•Ä': 'karti',
            '‡§ï‡§∞‡•á‡§Ç‡§ó‡•á': 'karenge',
            '‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ': 'karunga',
            '‡§ï‡§∞‡•Ç‡§Ç‡§ó‡•Ä': 'karungi',
            '‡§π‡•ã‡§®‡§æ': 'hona',
            '‡§π‡•ã': 'ho',
            '‡§π‡•ã‡§ó‡§æ': 'hoga',
            '‡§π‡•ã‡§ó‡•Ä': 'hogi',
            '‡§π‡•ã‡§Ç‡§ó‡•á': 'honge',
            '‡§¶‡•á‡§®‡§æ': 'dena',
            '‡§¶‡•ã': 'do',
            '‡§¶‡•á‡§Ç': 'den',
            '‡§≤‡•á‡§®‡§æ': 'lena',
            '‡§≤‡•ã': 'lo',
            '‡§≤‡•á‡§Ç': 'len',
            '‡§¨‡•ã‡§≤‡§®‡§æ': 'bolna',
            '‡§¨‡§§‡§æ‡§ì': 'batao',
            '‡§¨‡§§‡§æ‡§è‡§Ç': 'batayen',
            '‡§∏‡•Å‡§®‡§®‡§æ': 'sunna',
            '‡§¶‡•á‡§ñ‡§®‡§æ': 'dekhna',
            '‡§∏‡§Æ‡§ù‡§®‡§æ': 'samajhna',
            '‡§∏‡§Æ‡§ù': 'samajh',
            '‡§ö‡§æ‡§π‡§ø‡§è': 'chahiye',
            '‡§ö‡§æ‡§π‡§§‡§æ': 'chahta',
            '‡§ö‡§æ‡§π‡§§‡•Ä': 'chahti',
            '‡§ö‡§æ‡§π‡§§‡•á': 'chahte',
            '‡§™‡§∏‡§Ç‡§¶': 'pasand',
            '‡§Ö‡§ö‡•ç‡§õ‡§æ': 'accha',
            '‡§¨‡•Å‡§∞‡§æ': 'bura',
            '‡§†‡•Ä‡§ï': 'theek',
            '‡§¨‡•Å‡§ï ‡§ï‡§∞‡§®‡§æ': 'book karna',
            '‡§¨‡•Å‡§ï ‡§ï‡§∞‡•ã': 'book karo',
            '‡§¨‡•Å‡§ï ‡§ï‡§∞‡•á‡§Ç': 'book karen',
            '‡§∏‡•Å‡§ù‡§æ‡§µ': 'sujhav',
            '‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á‡§®‡§æ': 'sujhav dena',
            '‡§Æ‡§¶‡§¶': 'madad',
            '‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡§æ': 'madad karna',
            
            # Places and locations
            '‡§ú‡§Ø‡§™‡•Å‡§∞': 'Jaipur',
            '‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä': 'Delhi',
            '‡§Æ‡•Å‡§Ç‡§¨‡§à': 'Mumbai',
            '‡§¨‡•à‡§Ç‡§ó‡§≤‡•ã‡§∞': 'Bangalore',
            '‡§ö‡•á‡§®‡•ç‡§®‡§à': 'Chennai',
            '‡§ï‡•ã‡§≤‡§ï‡§æ‡§§‡§æ': 'Kolkata',
            '‡§π‡•à‡§¶‡§∞‡§æ‡§¨‡§æ‡§¶': 'Hyderabad',
            '‡§™‡•Å‡§£‡•á': 'Pune',
            '‡§Ö‡§π‡§Æ‡§¶‡§æ‡§¨‡§æ‡§¶': 'Ahmedabad',
            '‡§∞‡§æ‡§ú‡§∏‡•ç‡§•‡§æ‡§®': 'Rajasthan',
            '‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞': 'Maharashtra',
            '‡§ï‡§∞‡•ç‡§®‡§æ‡§ü‡§ï': 'Karnataka',
            '‡§§‡§Æ‡§ø‡§≤‡§®‡§æ‡§°‡•Å': 'Tamil Nadu',
            '‡§™‡§∂‡•ç‡§ö‡§ø‡§Æ ‡§¨‡§Ç‡§ó‡§æ‡§≤': 'West Bengal',
            
            # Food and restaurants
            '‡§∞‡•á‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§Ç‡§ü': 'restaurant',
            '‡§π‡•ã‡§ü‡§≤': 'hotel',
            '‡§ñ‡§æ‡§®‡§æ': 'khana',
            '‡§™‡§æ‡§®‡•Ä': 'pani',
            '‡§ö‡§æ‡§Ø': 'chai',
            '‡§ï‡•â‡§´‡•Ä': 'coffee',
            '‡§¶‡•Ç‡§ß': 'doodh',
            '‡§∞‡•ã‡§ü‡•Ä': 'roti',
            '‡§ö‡§æ‡§µ‡§≤': 'chawal',
            '‡§¶‡§æ‡§≤': 'dal',
            '‡§∏‡§¨‡•ç‡§ú‡•Ä': 'sabzi',
            '‡§Æ‡§æ‡§Ç‡§∏': 'maans',
            '‡§Æ‡§õ‡§≤‡•Ä': 'machhli',
            '‡§Ö‡§Ç‡§°‡§æ': 'anda',
            
            # Numbers and money
            '‡§è‡§ï': 'ek',
            '‡§¶‡•ã': 'do',
            '‡§§‡•Ä‡§®': 'teen',
            '‡§ö‡§æ‡§∞': 'chaar',
            '‡§™‡§æ‡§Ç‡§ö': 'paanch',
            '‡§õ‡§π': 'chhah',
            '‡§∏‡§æ‡§§': 'saat',
            '‡§Ü‡§†': 'aath',
            '‡§®‡•å': 'nau',
            '‡§¶‡§∏': 'das',
            '‡§¨‡•Ä‡§∏': 'bees',
            '‡§§‡•Ä‡§∏': 'tees',
            '‡§ö‡§æ‡§≤‡•Ä‡§∏': 'chaalis',
            '‡§™‡§ö‡§æ‡§∏': 'pachaas',
            '‡§∏‡§æ‡§†': 'saath',
            '‡§∏‡§§‡•ç‡§§‡§∞': 'sattar',
            '‡§Ö‡§∏‡•ç‡§∏‡•Ä': 'assi',
            '‡§®‡§¨‡•ç‡§¨‡•á': 'nabbe',
            '‡§∏‡•å': 'sau',
            '‡§π‡§ú‡§º‡§æ‡§∞': 'hazaar',
            '‡§≤‡§æ‡§ñ': 'laakh',
            '‡§ï‡§∞‡•ã‡§°‡§º': 'karod',
            '‡§∞‡•Å‡§™‡§è': 'rupaye',
            '‡§∞‡•Å‡§™‡§Ø‡§æ': 'rupya',
            
            # Time and dates
            '‡§Ü‡§ú': 'aaj',
            '‡§ï‡§≤': 'kal',
            '‡§™‡§∞‡§∏‡•ã‡§Ç': 'parson',
            '‡§∏‡•Å‡§¨‡§π': 'subah',
            '‡§¶‡•ã‡§™‡§π‡§∞': 'dopahar',
            '‡§∂‡§æ‡§Æ': 'shaam',
            '‡§∞‡§æ‡§§': 'raat',
            '‡§∏‡•ã‡§Æ‡§µ‡§æ‡§∞': 'somvaar',
            '‡§Æ‡§Ç‡§ó‡§≤‡§µ‡§æ‡§∞': 'mangalvaar',
            '‡§¨‡•Å‡§ß‡§µ‡§æ‡§∞': 'budhvaar',
            '‡§ó‡•Å‡§∞‡•Å‡§µ‡§æ‡§∞': 'guruvaar',
            '‡§∂‡•Å‡§ï‡•ç‡§∞‡§µ‡§æ‡§∞': 'shukravaar',
            '‡§∂‡§®‡§ø‡§µ‡§æ‡§∞': 'shanivaar',
            '‡§∞‡§µ‡§ø‡§µ‡§æ‡§∞': 'ravivaar',
            
            # Common phrases
            '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶': 'dhanyawad',
            '‡§∂‡•Å‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ': 'shukriya',
            '‡§Æ‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç': 'maaf karein',
            '‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç': 'kshama karein',
            '‡§π‡§æ‡§Å': 'haan',
            '‡§®‡§π‡•Ä‡§Ç': 'nahi',
            '‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à': 'ho sakta hai',
            '‡§ú‡§º‡§∞‡•Ç‡§∞': 'zaroor',
            '‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤': 'bilkul',
            '‡§∂‡§æ‡§Ø‡§¶': 'shayad',
            '‡§ï‡§≠‡•Ä ‡§®‡§π‡•Ä‡§Ç': 'kabhi nahi',
            '‡§π‡§Æ‡•á‡§∂‡§æ': 'hamesha',
            '‡§ï‡§≠‡•Ä-‡§ï‡§≠‡•Ä': 'kabhi-kabhi',
            
            # Business and travel terms
            '‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó': 'booking',
            '‡§∞‡§ø‡§ú‡§∞‡•ç‡§µ‡•á‡§∂‡§®': 'reservation',
            '‡§ü‡§ø‡§ï‡§ü': 'ticket',
            '‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ': 'yatra',
            '‡§ò‡•Ç‡§Æ‡§®‡§æ': 'ghoomna',
            '‡§¶‡•á‡§ñ‡§®‡§æ': 'dekhna',
            '‡§Æ‡§ø‡§≤‡§®‡§æ': 'milna',
            '‡§¨‡§æ‡§§ ‡§ï‡§∞‡§®‡§æ': 'baat karna',
            '‡§∏‡§π‡§æ‡§Ø‡§§‡§æ': 'sahayata',
            '‡§Æ‡§¶‡§¶': 'madad',
            '‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä': 'jankari',
            '‡§∏‡•Å‡§ù‡§æ‡§µ': 'sujhaav',
            '‡§™‡•ç‡§≤‡§æ‡§®': 'plan',
            '‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ': 'program',
            
            # Technology terms
            '‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü': 'internet',
            '‡§µ‡§æ‡§à‡§´‡§æ‡§à': 'WiFi',
            '‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤': 'mobile',
            '‡§´‡•ã‡§®': 'phone',
            '‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞': 'computer',
            '‡§≤‡•à‡§™‡§ü‡•â‡§™': 'laptop',
            '‡§ü‡•à‡§¨‡§≤‡•á‡§ü': 'tablet',
            '‡§ê‡§™': 'app',
            '‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü': 'website',
            '‡§à‡§Æ‡•á‡§≤': 'email',
            '‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°': 'password',
            '‡§≤‡•â‡§ó‡§ø‡§®': 'login',
            '‡§∏‡§æ‡§á‡§® ‡§Ö‡§™': 'sign up',
            '‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§°': 'download',
            '‡§Ö‡§™‡§≤‡•ã‡§°': 'upload',
            
            # Remove "Sara:" prefix if present
            'Sara: ': '',
            'Sara:': ''
        }
        
        optimized_text = text
        for hindi, romanized in replacements.items():
            optimized_text = optimized_text.replace(hindi, romanized)
        
        # Additional cleanup for better pronunciation
        optimized_text = optimized_text.replace('  ', ' ')  # Remove double spaces
        optimized_text = optimized_text.strip()  # Remove leading/trailing spaces
        
        return optimized_text
    
    def _add_natural_pauses(self, text: str) -> str:
        """Add natural pauses and speech patterns for more human-like delivery"""
        # Add subtle pauses after punctuation for more natural flow
        text = text.replace(',', ', ')
        text = text.replace('.', '. ')
        text = text.replace('!', '! ')
        text = text.replace('?', '? ')
        
        # Add natural pauses for common Hindi/English transitions
        text = text.replace(' ‡§î‡§∞ ', ' aur ')
        text = text.replace(' ‡§§‡•ã ', ' to ')
        text = text.replace(' ‡§≤‡•á‡§ï‡§ø‡§® ', ' lekin ')
        text = text.replace(' ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ', ' kyunki ')
        
        # Add emphasis for important words (subtle)
        text = text.replace(' ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶ ', ' dhanyavaad ')
        text = text.replace(' ‡§∂‡•Å‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ', ' shukriya ')
        text = text.replace(' ‡§®‡§Æ‡§∏‡•ç‡§§‡•á ', ' namaste ')
        
        # Add natural breathing pauses for longer sentences
        sentences = text.split('.')
        if len(sentences) > 1:
            # Add slight pause between sentences
            text = '. '.join(sentences)
        
        # Clean up multiple spaces
        import re
        text = re.sub(r'\s+', ' ', text)
        
        return text.strip()
    
    def speak_hindi_gtts(self, text: str) -> Optional[str]:
        """Generate Hindi speech using gTTS (fallback)"""
        try:
            from gtts import gTTS
            
            # Create audio file
            audio_dir = Path("audio_files")
            audio_dir.mkdir(exist_ok=True)
            timestamp = int(time.time() * 1000)
            audio_file = audio_dir / f"gtts_hindi_{timestamp}.mp3"
            
            tts = gTTS(text=text, lang='hi', slow=False)
            tts.save(str(audio_file))
            
            print(f"üéµ gTTS Hindi TTS: {audio_file.name}")
            # Return just the filename; the controller will build a public URL
            return audio_file.name
            
        except Exception as e:
            print(f"‚ùå gTTS error: {e}")
            return None
    
    def speak_enhanced_hindi(self, text: str) -> str:
        """
        Generate high-quality Hindi speech using the best available provider.
        
        Args:
            text: Hindi text to convert to speech
            
        Returns:
            Audio URL or original text if all providers fail
        """
        print(f"üé§ Generating enhanced Hindi TTS for: '{text}'")
        
        # Detect if text contains Hindi characters
        has_hindi = any('\u0900' <= char <= '\u097F' for char in text)
        
        # For Hindi/mixed content, prioritize Hindi-optimized providers
        if has_hindi:
            print("üîç Hindi content detected - prioritizing Hindi-optimized providers")
            # Reorder providers for Hindi content: Azure > Google > OpenAI > gTTS
            hindi_optimized_providers = []
            for provider in ['azure', 'google', 'openai', 'gtts']:
                if provider in self.providers:
                    hindi_optimized_providers.append(provider)
        else:
            print("üîç English content detected - using preferred provider")
            # For English content, use the preferred provider order
            hindi_optimized_providers = self.providers
        
        # Try providers in optimized order
        for provider in hindi_optimized_providers:
            try:
                if provider == 'azure':
                    result = self.speak_hindi_azure(text)
                elif provider == 'google':
                    result = self.speak_hindi_google(text)
                elif provider == 'openai':
                    result = self.speak_hindi_openai(text)
                elif provider == 'gtts':
                    result = self.speak_hindi_gtts(text)
                else:
                    continue
                
                if result:
                    print(f"‚úÖ Enhanced Hindi TTS successful with {provider}")
                    # Clean up old files after successful generation
                    self._cleanup_old_audio_files()
                    return result
                    
            except Exception as e:
                print(f"‚ùå {provider} failed: {e}")
                continue
        
        print("‚ùå All Hindi TTS providers failed, returning text")
        return text
    
    def speak_mixed_language(self, text: str) -> str:
        """
        Generate speech for mixed language text.
        
        Args:
            text: Text to convert to speech
            
        Returns:
            Audio URL or original text
        """
        language = detect_language(text)
        
        if language == 'hi':
            return self.speak_enhanced_hindi(text)
        elif language == 'mixed':
            # For mixed text, use the best available provider
            return self.speak_enhanced_hindi(text)
        else:
            # For English, also use enhanced TTS
            return self.speak_enhanced_hindi(text)


# Global instance
enhanced_hindi_tts = EnhancedHindiTTS()


def speak_enhanced_hindi(text: str) -> str:
    """Main function to generate enhanced Hindi speech"""
    return enhanced_hindi_tts.speak_enhanced_hindi(text)


def speak_mixed_enhanced(text: str) -> str:
    """Main function to generate enhanced mixed language speech"""
    return enhanced_hindi_tts.speak_mixed_language(text)

